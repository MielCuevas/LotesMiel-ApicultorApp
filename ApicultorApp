<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ApicultorApp - Trazabilidad en Polygon</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        .table-auto th, .table-auto td { @apply px-4 py-2 text-center align-middle; }
        .table-auto th { @apply bg-gray-200 font-semibold; }
        .table-auto tbody tr:nth-child(even) { @apply bg-gray-50; }
        .action-btn:hover { color: #8247e5; }
        .wallet-status {
            background: linear-gradient(135deg, #8247e5 0%, #7b3fe4 100%);
        }
        .tx-pending { animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite; }
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: .8; }
        }
        select:disabled, input:disabled {
            background-color: #e5e7eb;
            cursor: not-allowed;
        }
        .frame-row input { @apply w-24; }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">

    <!-- Smart Contract Code for Reference and Deployment -->
    <script type="text/solidity" id="HoneyTraceabilityContract">
    /*
        // SPDX-License-Identifier: MIT
        pragma solidity ^0.8.20;

        // ESTE ES EL CONTRATO INTELIGENTE QUE DEBES DESPLEGAR EN POLYGON
        // Puedes usar Remix IDE (https://remix.ethereum.org/) para compilarlo y desplegarlo.
        
        contract HoneyTraceability {

            address public owner;

            struct Lote {
                string lotNumber;
                string honeyType;
                uint256 initialKilos;
                uint256 availableKilos;
                uint256 packagingDate;
                string dataHash; // Hash de todos los datos off-chain (fechas, cuadros, fotos, etc.)
                bool exists;
            }

            struct Venta {
                string lotNumber;
                uint256 kilosSold;
                uint256 saleDate;
                string description;
            }

            mapping(string => Lote) public lotes;
            Venta[] public historialVentas;
            mapping(uint => string) public loteIndex;
            uint public loteCount;

            event LoteCreado(address indexed apicultor, string lotNumber, uint256 initialKilos, string dataHash);
            event VentaRegistrada(string lotNumber, uint256 kilosSold, string description);

            modifier onlyOwner() {
                require(msg.sender == owner, "Accion reservada solo para el propietario del contrato.");
                _;
            }

            constructor() {
                owner = msg.sender;
            }

            function crearLote(string memory _lotNumber, string memory _honeyType, uint256 _initialKilos, uint256 _packagingDate, string memory _dataHash) public onlyOwner {
                require(!lotes[_lotNumber].exists, "Este lote ya existe.");

                lotes[_lotNumber] = Lote({
                    lotNumber: _lotNumber,
                    honeyType: _honeyType,
                    initialKilos: _initialKilos,
                    availableKilos: _initialKilos,
                    packagingDate: _packagingDate,
                    dataHash: _dataHash,
                    exists: true
                });
                
                loteIndex[loteCount] = _lotNumber;
                loteCount++;

                emit LoteCreado(msg.sender, _lotNumber, _initialKilos, _dataHash);
            }

            function registrarVenta(string memory _lotNumber, uint256 _kilosSold, string memory _description) public onlyOwner {
                Lote storage lote = lotes[_lotNumber];
                require(lote.exists, "El lote no existe.");
                require(lote.availableKilos >= _kilosSold, "Stock insuficiente.");

                lote.availableKilos -= _kilosSold;
                historialVentas.push(Venta({
                    lotNumber: _lotNumber,
                    kilosSold: _kilosSold,
                    saleDate: block.timestamp,
                    description: _description
                }));

                emit VentaRegistrada(_lotNumber, _kilosSold, _description);
            }
            
            function getAllLotes() public view returns (Lote[] memory) {
                Lote[] memory allLotes = new Lote[](loteCount);
                for (uint i = 0; i < loteCount; i++) {
                    allLotes[i] = lotes[loteIndex[i]];
                }
                return allLotes;
            }
        }
    */
    </script>

    <div class="container mx-auto p-4 md:p-8">
        <header class="text-center mb-6">
             <div class="flex justify-center items-center mb-2">
                <svg class="w-10 h-10 mr-2 text-yellow-500" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M3.22,13.35a1.8,1.8,0,0,0-.47,1.15,1.74,1.74,0,0,0,.47,1.15l5.36,5.37a1.8,1.8,0,0,0,1.15.46,1.74,1.74,0,0,0,1.15-.46l5.36-5.37a1.8,1.8,0,0,0,.47-1.15,1.74,1.74,0,0,0-.47-1.15L11.23,8a1.8,1.8,0,0,0-1.15-.46,1.74,1.74,0,0,0-1.15.46Zm8-5.48L5.86,13.24a.3.3,0,0,0,0,.42l5.36,5.37a.3.3,0,0,0,.42,0l5.36-5.37a.3.3,0,0,0,0-.42L11.65,7.87a.3.3,0,0,0-.42,0Zm6.89,2.5L16,8.25,14,6.17l2.12-2.12a1.8,1.8,0,0,1,2.55,0l2.54,2.54a1.8,1.8,0,0,1,0,2.55Z"/></svg>
                <h1 class="text-4xl font-bold text-gray-800">ApicultorApp</h1>
            </div>
            <p class="text-lg text-purple-700 font-semibold">Operando en la red Polygon</p>
        </header>
        
        <section id="wallet-section" class="mb-8 p-4 rounded-lg shadow-lg wallet-status text-white">
            <div id="disconnected-state">
                <div class="flex flex-col md:flex-row items-center justify-between">
                    <div class="mb-4 md:mb-0">
                        <label for="network-selector" class="block text-sm font-semibold mb-1">1. Selecciona la Red</label>
                        <select id="network-selector" class="block w-full text-gray-800 rounded-md py-2 px-3">
                            <option value="polygon">Polygon Mainnet (Real)</option>
                            <option value="amoy">Amoy Testnet (Pruebas)</option>
                        </select>
                    </div>
                    <div class="text-center">
                         <p class="font-semibold mb-2">2. Conecta tu Cartera</p>
                         <button id="connect-wallet-btn" class="bg-white text-purple-700 font-bold py-2 px-6 rounded-lg hover:bg-gray-100 transition-colors">
                            Conectar MetaMask
                        </button>
                    </div>
                </div>
            </div>
            <div id="connected-state" class="hidden">
                 <h2 class="text-xl font-bold mb-2">Conectado</h2>
                 <div class="grid grid-cols-1 md:grid-cols-2 gap-2 text-sm">
                    <div>
                        <p class="opacity-80">Red:</p>
                        <p id="network-status" class="font-semibold flex items-center"></p>
                    </div>
                    <div>
                        <p class="opacity-80">Tu Dirección:</p>
                        <p id="wallet-address" class="font-mono truncate"></p>
                    </div>
                </div>
            </div>
        </section>

        <div id="main-app" class="opacity-40 pointer-events-none">
            <!-- Beekeeper Data Section -->
            <section class="mb-8 bg-white p-6 rounded-lg shadow-lg">
                <h2 class="text-2xl font-bold mb-4 border-b pb-2 text-gray-700">Datos del Apicultor</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div><label for="beekeeperName" class="block text-sm font-medium">Nombre y Apellidos</label><input type="text" id="beekeeperName" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm"></div>
                    <div><label for="regaCode" class="block text-sm font-medium">REGA</label><input type="text" id="regaCode" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm"></div>
                    <div><label for="contactPhone" class="block text-sm font-medium">Teléfono de Contacto</label><input type="tel" id="contactPhone" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm"></div>
                    <div><label for="contactEmail" class="block text-sm font-medium">Correo Electrónico</label><input type="email" id="contactEmail" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm"></div>
                </div>
            </section>

            <main class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Lot Creation Form -->
                <section class="bg-white p-6 rounded-lg shadow-lg">
                    <h2 class="text-2xl font-bold mb-4 border-b pb-2 text-purple-800">1. Crear Lote en Blockchain</h2>
                    <form id="traceability-form" class="space-y-4">
                        <!-- New Fields -->
                        <div><label for="harvestDate" class="block text-sm font-medium text-gray-700">Fecha de Cosecha</label><input type="date" id="harvestDate" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" required></div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Tipos y Cantidad de Cuadros (Opcional)</label>
                            <div id="frames-container" class="space-y-2 mt-1"></div>
                            <button type="button" id="add-frame-btn" class="mt-2 text-sm text-purple-600 hover:text-purple-800 font-semibold flex items-center">
                                <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd"></path></svg>
                                Añadir tipo de cuadro
                            </button>
                        </div>
                        <div><label for="extractionDate" class="block text-sm font-medium text-gray-700">Fecha de Extracción</label><input type="date" id="extractionDate" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" required></div>
                        <div><label for="extractionType" class="block text-sm font-medium text-gray-700">Tipo de Extracción</label><textarea id="extractionType" rows="2" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm" placeholder="Ej: Extractor radial, por goteo..."></textarea></div>
                         <div><label for="ripenerDate" class="block text-sm font-medium text-gray-700">Fecha de Entrada a Madurador (Opcional)</label><input type="date" id="ripenerDate" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm"></div>
                        
                        <!-- Original Fields -->
                        <div>
                            <label for="honeyType" class="block text-sm font-medium text-gray-700">Tipo/Variedad de Miel</label>
                            <select id="honeyType" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm"><option>Brecina/Biércol</option><option>Brezo</option><option>Multi Floral</option></select>
                        </div>
                        <div>
                           <label for="packagingDate" class="block text-sm font-medium text-gray-700">Fecha de Envasado</label>
                           <input type="date" id="packagingDate" class="mt-1 block w-full rounded-md shadow-sm" required>
                        </div>
                        <div>
                            <label for="extractedQuantity" class="block text-sm font-medium text-gray-700">Cantidad a Registrar (Kilos)</label>
                            <input type="number" id="extractedQuantity" step="0.01" min="0" class="mt-1 block w-full rounded-md shadow-sm" required>
                        </div>

                         <!-- Image and QR Code Section -->
                        <div>
                            <label for="lotImage" class="block text-sm font-medium text-gray-700">Imagen del Lote (Opcional)</label>
                            <input type="file" id="lotImage" accept="image/*" class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-purple-50 file:text-purple-700 hover:file:bg-purple-100">
                            <p class="text-xs text-gray-500 mt-1">Si subes una imagen, se le añadirá un código QR con todos los datos del lote.</p>
                        </div>
                        
                        <button type="submit" class="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-3 px-4 rounded-lg flex items-center justify-center">
                            Crear Lote (Enviar Transacción)
                        </button>
                    </form>
                </section>
                <!-- Sale Registration Form -->
                <section class="bg-white p-6 rounded-lg shadow-lg">
                    <h2 class="text-2xl font-bold mb-4 border-b pb-2 text-green-700">2. Registrar Venta en Blockchain</h2>
                    <form id="sales-form" class="space-y-4">
                        <div>
                            <label for="lotSelector" class="block text-sm font-medium">Seleccionar Lote de la Blockchain</label>
                            <select id="lotSelector" class="mt-1 block w-full rounded-md shadow-sm" required></select>
                        </div>
                        <div>
                            <label for="quantity" class="block text-sm font-medium">Kilos a Vender</label>
                            <input type="number" id="quantity" step="0.01" min="0" class="mt-1 block w-full rounded-md shadow-sm" required>
                        </div>
                         <div>
                            <label for="saleDescription" class="block text-sm font-medium">Descripción de la Venta</label>
                            <input type="text" id="saleDescription" class="mt-1 block w-full rounded-md shadow-sm" required placeholder="Ej: Venta a minorista 'El Corte Miel'">
                        </div>
                        <div>
                            <label for="saleImage" class="block text-sm font-medium text-gray-700">Foto de la Venta (Opcional)</label>
                            <input type="file" id="saleImage" accept="image/*" class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-green-50 file:text-green-700 hover:file:bg-green-100">
                            <p class="text-xs text-gray-500 mt-1">Esta imagen se asocia a la venta para tu registro local.</p>
                        </div>
                        <button type="submit" class="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-4 rounded-lg flex items-center justify-center">
                           Registrar Venta (Enviar Transacción)
                        </button>
                    </form>
                </section>
            </main>
             <section id="lots-display" class="mt-8 bg-white p-6 rounded-lg shadow-lg">
                <div class="flex justify-between items-center">
                    <h2 class="text-2xl font-bold text-gray-800">Lotes Registrados en la Blockchain</h2>
                    <button id="refresh-lotes-btn" class="text-sm bg-gray-200 hover:bg-gray-300 px-4 py-2 rounded-md flex items-center">
                       <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h5M20 20v-5h-5M4 4l16 16"></path></svg>
                        Refrescar
                    </button>
                </div>
                <div class="overflow-x-auto mt-4"><table class="w-full table-auto">
                    <thead><tr><th>Nº Lote</th><th>Fecha Env.</th><th>Tipo</th><th>Kilos Disp.</th><th>Acciones</th></tr></thead>
                    <tbody id="lotsTableBody"><tr><td colspan="5" class="py-4 text-gray-500">Conecta tu cartera para ver los lotes.</td></tr></tbody>
                </table></div>
            </section>
        </div>
    </div>

    <!-- Notification Modal -->
    <div id="notification-modal" class="fixed inset-0 bg-gray-800 bg-opacity-75 h-full w-full hidden z-50 flex items-center justify-center p-4">
      <div id="notification-content" class="relative p-6 border w-full max-w-sm shadow-lg rounded-md bg-white text-center">
          <div id="notification-spinner" class="hidden"><svg class="animate-spin h-8 w-8 text-purple-600 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg></div>
          <h3 id="notification-title" class="text-lg font-bold mt-3"></h3>
          <p id="notification-message" class="mt-2 text-sm text-gray-600 break-words"></p>
          <div class="mt-4"><button id="notification-close-btn" class="w-full rounded-md bg-purple-600 px-4 py-2 text-white shadow-sm hover:bg-purple-700">Cerrar</button></div>
      </div>
    </div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ethers/5.7.2/ethers.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/qrcode-generator@1.4.4/qrcode.min.js"></script>


    <script type="module">
        // --- DAPP CONFIGURATION ---
        // Pega aquí la dirección y el ABI después de desplegar tu contrato.
        const contractConfig = {
            address: "0xc65B6D06C6F08CEC24E2cB1DFC7eE2CD52Bd6107",
            abi: [ 	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_lotNumber",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_honeyType",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "_initialKilos",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "_packagingDate",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "_dataHash",
				"type": "string"
			}
		],
		"name": "crearLote",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "apicultor",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "lotNumber",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "initialKilos",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "dataHash",
				"type": "string"
			}
		],
		"name": "LoteCreado",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_lotNumber",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "_kilosSold",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "_description",
				"type": "string"
			}
		],
		"name": "registrarVenta",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"internalType": "string",
				"name": "lotNumber",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "kilosSold",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "description",
				"type": "string"
			}
		],
		"name": "VentaRegistrada",
		"type": "event"
	},
	{
		"inputs": [],
		"name": "getAllLotes",
		"outputs": [
			{
				"components": [
					{
						"internalType": "string",
						"name": "lotNumber",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "honeyType",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "initialKilos",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "availableKilos",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "packagingDate",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "dataHash",
						"type": "string"
					},
					{
						"internalType": "bool",
						"name": "exists",
						"type": "bool"
					}
				],
				"internalType": "struct HoneyTraceability.Lote[]",
				"name": "",
				"type": "tuple[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "historialVentas",
		"outputs": [
			{
				"internalType": "string",
				"name": "lotNumber",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "kilosSold",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "saleDate",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "description",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "loteCount",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "loteIndex",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"name": "lotes",
		"outputs": [
			{
				"internalType": "string",
				"name": "lotNumber",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "honeyType",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "initialKilos",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "availableKilos",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "packagingDate",
				"type": "uint256"
			},
			{
				"internalType": "string",
				"name": "dataHash",
				"type": "string"
			},
			{
				"internalType": "bool",
				"name": "exists",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	} ]
        };
        
        const networks = {
            polygon: { chainId: '0x89', name: 'Polygon Mainnet', explorer: 'https://polygonscan.com' },
            amoy: { chainId: '0x13882', name: 'Amoy Testnet', explorer: 'https://www.oklink.com/amoy' }
        };

        // --- GLOBAL VARIABLES ---
        let provider, signer, contract, walletAddress, currentNetwork;

        // --- DOM ELEMENTS ---
        const connectWalletBtn = document.getElementById('connect-wallet-btn');
        const mainApp = document.getElementById('main-app');
        const lotsTableBody = document.getElementById('lotsTableBody');
        const lotSelector = document.getElementById('lotSelector');
        const traceabilityForm = document.getElementById('traceability-form');
        const salesForm = document.getElementById('sales-form');
        const networkSelector = document.getElementById('network-selector');
        
        // --- LOCAL STORAGE ---
        // Simulates a database for off-chain data. In a production DApp, this might be IPFS or a dedicated server.
        const saveLocalLotData = (lotNumber, data) => {
            const allData = JSON.parse(localStorage.getItem('ApicultorAppLocalData') || '{}');
            allData[lotNumber] = data;
            localStorage.setItem('ApicultorAppLocalData', JSON.stringify(allData));
        };
        const getLocalLotData = (lotNumber) => {
            const allData = JSON.parse(localStorage.getItem('ApicultorAppLocalData') || '{}');
            return allData[lotNumber];
        };

        // --- WALLET & BLOCKCHAIN INTERACTION ---

        const connectWallet = async () => {
            if (typeof window.ethereum === 'undefined') {
                return showNotification("Error de Conexión", "No se detectó MetaMask. Por favor, instala la extensión en tu navegador.");
            }
            if (!contractConfig.address || contractConfig.address.startsWith("PEGA_AQUI")) {
                return showNotification("Configuración Incompleta", "El desarrollador debe configurar la dirección del contrato en el script.");
            }
            showNotification("Conectando...", "Por favor, aprueba la conexión en tu cartera MetaMask.", true);

            try {
                await window.ethereum.request({ method: 'eth_requestAccounts' });
                provider = new ethers.providers.Web3Provider(window.ethereum);
                const network = await provider.getNetwork();
                const selectedNetworkKey = networkSelector.value;
                currentNetwork = networks[selectedNetworkKey];
                
                if (network.chainId !== parseInt(currentNetwork.chainId, 16)) {
                    showNotification("Red Incorrecta", `Por favor, cambia tu cartera a la red ${currentNetwork.name}.`);
                    return;
                }
                
                signer = provider.getSigner();
                walletAddress = await signer.getAddress();
                contract = new ethers.Contract(contractConfig.address, contractConfig.abi, signer);
                
                updateUIOnConnect();
                await fetchAndRenderLotes();
                listenToContractEvents();
                showNotification("¡Conectado!", `Cartera conectada a ${currentNetwork.name}.`);

            } catch (error) {
                showNotification("Error", `Conexión fallida: ${error.message}`);
            }
        };

        const fetchAndRenderLotes = async () => {
            if (!contract) return;
            lotsTableBody.innerHTML = '<tr><td colspan="5" class="py-4 text-gray-500">Cargando lotes desde la blockchain...</td></tr>';
            try {
                const allLotes = await contract.getAllLotes();
                renderLotes(allLotes);
            } catch(error) {
                lotsTableBody.innerHTML = '<tr><td colspan="5" class="py-4 text-red-500">Error al cargar los lotes.</td></tr>';
            }
        };
        
        const handleCreateLot = async (e) => {
            e.preventDefault();
            const imageFile = document.getElementById('lotImage').files[0];

            // 1. Collect all data for off-chain storage and QR code
            const beekeeperData = {
                name: document.getElementById('beekeeperName').value,
                rega: document.getElementById('regaCode').value,
                phone: document.getElementById('contactPhone').value,
                email: document.getElementById('contactEmail').value
            };
            const frames = Array.from(document.querySelectorAll('.frame-row')).map(row => ({
                type: row.querySelector('.frame-type').value,
                quantity: row.querySelector('.frame-quantity').value
            })).filter(f => f.quantity);

            const packagingDate = document.getElementById('packagingDate').value;
            const packagingTimestamp = Math.floor(new Date(packagingDate).getTime() / 1000);
            const lotNumber = `LOTE-${packagingDate.replace(/-/g, '')}-${walletAddress.slice(-4)}`;

            const fullLotData = {
                lotNumber: lotNumber,
                beekeeper: beekeeperData,
                harvestDate: document.getElementById('harvestDate').value,
                frames: frames,
                extractionDate: document.getElementById('extractionDate').value,
                extractionType: document.getElementById('extractionType').value,
                ripenerDate: document.getElementById('ripenerDate').value,
                honeyType: document.getElementById('honeyType').value,
                packagingDate: packagingDate,
                initialKilos: document.getElementById('extractedQuantity').value,
                onChainData: {
                    contractAddress: contractConfig.address,
                    network: currentNetwork.name
                }
            };
            
            // 2. Generate hash of the full data object
            const dataString = JSON.stringify(fullLotData);
            const textEncoder = new TextEncoder();
            const dataHashBuffer = await crypto.subtle.digest('SHA-256', textEncoder.encode(dataString));
            const dataHash = Array.from(new Uint8Array(dataHashBuffer)).map(b => b.toString(16).padStart(2, '0')).join('');

            // 3. Handle image and QR code merging
            if (imageFile) {
                showNotification("Procesando Imagen...", "Fusionando datos y código QR con tu imagen.", true);
                try {
                    const mergedImageURL = await mergeImageAndQr(imageFile, dataString);
                    fullLotData.mergedImage = mergedImageURL;
                } catch (err) {
                    showNotification("Error de Imagen", `No se pudo procesar la imagen: ${err.message}`);
                    return;
                }
            }
            
            // 4. Save full data locally
            saveLocalLotData(lotNumber, fullLotData);

            // 5. Send transaction to blockchain
            showNotification("Transacción Pendiente", `Enviando lote ${lotNumber} a la red...`, true);
            try {
                const initialKilos = ethers.utils.parseUnits(fullLotData.initialKilos, 2);
                const tx = await contract.crearLote(lotNumber, fullLotData.honeyType, initialKilos, packagingTimestamp, dataHash);
                showNotification("Procesando...", `Transacción enviada. Esperando confirmación...<br><a href="${currentNetwork.explorer}/tx/${tx.hash}" target="_blank" class="text-purple-600 hover:underline">Ver en Explorer</a>`, true);
                
                await tx.wait();
                
                showNotification("¡Éxito!", `Lote ${lotNumber} creado y confirmado en la blockchain.`);
                traceabilityForm.reset();
                document.getElementById('frames-container').innerHTML = '';
                addFrameRow();

            } catch (error) {
                showNotification("Transacción Fallida", `Error: ${error.reason || error.message}`);
            }
        };

        const handleRegisterSale = async (e) => {
            e.preventDefault();
            const lotNumber = lotSelector.value;
            const kilosSold = document.getElementById('quantity').value;
            const description = document.getElementById('saleDescription').value;
            // Note: Sale image is handled locally, not sent to contract
            const saleImageFile = document.getElementById('saleImage').files[0];

            showNotification("Transacción Pendiente", `Registrando venta para el lote ${lotNumber}...`, true);

            try {
                const tx = await contract.registrarVenta(lotNumber, ethers.utils.parseUnits(kilosSold, 2), description);
                showNotification("Procesando...", `Transacción enviada. Esperando confirmación...<br><a href="${currentNetwork.explorer}/tx/${tx.hash}" target="_blank" class="text-purple-600 hover:underline">Ver en Explorer</a>`, true);

                await tx.wait();
                
                // Locally, we could associate the sale image with this transaction hash if needed
                if(saleImageFile) {
                    console.log(`Venta registrada. Foto asociada (localmente): ${saleImageFile.name}`);
                }

                showNotification("¡Éxito!", `Venta registrada y confirmada en la blockchain.`);
                salesForm.reset();
            } catch (error) {
                showNotification("Transacción Fallida", `Error: ${error.reason || error.message}`);
            }
        };

        // --- UI & RENDERING ---
        
        const updateUIOnConnect = () => {
            document.getElementById('connected-state').classList.remove('hidden');
            document.getElementById('disconnected-state').classList.add('hidden');
            document.getElementById('network-status').innerHTML = `<span class="h-3 w-3 ${currentNetwork.name.includes("Mainnet") ? 'bg-green-400' : 'bg-yellow-400'} rounded-full mr-2"></span>${currentNetwork.name}`;
            document.getElementById('wallet-address').textContent = walletAddress;
            mainApp.classList.remove('opacity-40', 'pointer-events-none');
            networkSelector.disabled = true;
        };
        
        const renderLotes = (lotes) => {
            lotsTableBody.innerHTML = '';
            lotSelector.innerHTML = '<option value="">-- Selecciona un lote --</option>';

            if (lotes.length === 0) {
                 lotsTableBody.innerHTML = '<tr><td colspan="5" class="py-4 text-gray-500">No se encontraron lotes para este contrato.</td></tr>';
                 return;
            }

            lotes.sort((a,b) => b.packagingDate - a.packagingDate);

            lotes.forEach(lot => {
                const localData = getLocalLotData(lot.lotNumber);
                const availableKilos = parseFloat(ethers.utils.formatUnits(lot.availableKilos, 2));
                const row = document.createElement('tr');
                row.dataset.lotNumber = lot.lotNumber;
                const formattedDate = new Date(lot.packagingDate * 1000).toLocaleDateString();
                row.innerHTML = `
                    <td class="font-mono text-xs">${lot.lotNumber}</td>
                    <td>${formattedDate}</td>
                    <td>${lot.honeyType}</td>
                    <td class="font-semibold ${availableKilos > 0 ? 'text-green-600' : 'text-red-600'}">${availableKilos.toFixed(2)} kg</td>
                    <td class="flex items-center justify-center space-x-3">
                        <button class="download-data-btn action-btn text-gray-500" title="Descargar Datos (JSON)"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd" /></svg></button>
                        <button class="download-image-btn action-btn text-gray-500 ${localData && localData.mergedImage ? '' : 'hidden'}" title="Descargar Imagen con QR"><svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd" /></svg></button>
                        <a href="${currentNetwork.explorer}/address/${contractConfig.address}" target="_blank" class="action-btn text-gray-500" title="Ver Contrato en Explorer"><svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path></svg></a>
                    </td>`;
                lotsTableBody.appendChild(row);

                if (availableKilos > 0) {
                    lotSelector.innerHTML += `<option value="${lot.lotNumber}">${lot.lotNumber} (${availableKilos.toFixed(2)} kg)</option>`;
                }
            });
        };

        const listenToContractEvents = () => {
            if(!contract) return;
            contract.on("LoteCreado", () => fetchAndRenderLotes());
            contract.on("VentaRegistrada", () => fetchAndRenderLotes());
        };

        const addFrameRow = () => {
            const container = document.getElementById('frames-container');
            const row = document.createElement('div');
            row.className = 'frame-row flex items-center space-x-2';
            row.innerHTML = `
                <select class="frame-type block w-full rounded-md border-gray-300 shadow-sm">
                    <option>Cuadro Langstroth</option>
                    <option>Cuadro Media Alza Langstroth</option>
                </select>
                <input type="number" min="1" placeholder="Cant." class="frame-quantity block rounded-md border-gray-300 shadow-sm">
                <button type="button" class="remove-frame-btn text-red-500 hover:text-red-700">&times;</button>
            `;
            container.appendChild(row);
            row.querySelector('.remove-frame-btn').addEventListener('click', () => row.remove());
        };

        const mergeImageAndQr = (imageFile, qrData) => {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = (e) => {
                    const img = new Image();
                    img.onload = () => {
                        const canvas = document.createElement('canvas');
                        canvas.width = img.width;
                        canvas.height = img.height;
                        const ctx = canvas.getContext('2d');
                        ctx.drawImage(img, 0, 0);

                        const qr = qrcode(0, 'M');
                        qr.addData(qrData);
                        qr.make();
                        const qrImg = new Image();
                        qrImg.onload = () => {
                            const qrSize = Math.min(img.width, img.height) * 0.2; // 20% of the smallest dimension
                            const margin = qrSize * 0.05;
                            const x = img.width - qrSize - margin;
                            const y = img.height - qrSize - margin;
                            
                            ctx.fillStyle = 'white';
                            ctx.fillRect(x - margin, y - margin, qrSize + margin*2, qrSize + margin*2);
                            ctx.drawImage(qrImg, x, y, qrSize, qrSize);
                            resolve(canvas.toDataURL('image/jpeg'));
                        };
                        qrImg.src = qr.createDataURL(10, 5);
                    };
                    img.onerror = reject;
                    img.src = e.target.result;
                };
                reader.onerror = reject;
                reader.readAsDataURL(imageFile);
            });
        };

        const handleDownloadData = (lotNumber) => {
            const data = getLocalLotData(lotNumber);
            if (!data) return showNotification("Error", "No se encontraron datos locales para este lote.");
            const dataStr = JSON.stringify(data, null, 2);
            const blob = new Blob([dataStr], { type: "application/json" });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `${lotNumber}.json`;
            a.click();
            URL.revokeObjectURL(url);
        };

        const handleDownloadImage = (lotNumber) => {
            const data = getLocalLotData(lotNumber);
            if (!data || !data.mergedImage) return showNotification("Error", "No se encontró una imagen generada para este lote.");
            const a = document.createElement('a');
a.href = data.mergedImage;
            a.download = `${lotNumber}.jpg`;
            a.click();
        };

        // --- EVENT LISTENERS & INITIALIZATION ---
        
        connectWalletBtn.addEventListener('click', connectWallet);
        traceabilityForm.addEventListener('submit', handleCreateLot);
        salesForm.addEventListener('submit', handleRegisterSale);
        document.getElementById('refresh-lotes-btn').addEventListener('click', fetchAndRenderLotes);
        document.getElementById('add-frame-btn').addEventListener('click', addFrameRow);
        
        lotsTableBody.addEventListener('click', (e) => {
            const lotRow = e.target.closest('tr');
            if (!lotRow || !lotRow.dataset.lotNumber) return;
            const lotNumber = lotRow.dataset.lotNumber;
            if (e.target.closest('.download-data-btn')) handleDownloadData(lotNumber);
            if (e.target.closest('.download-image-btn')) handleDownloadImage(lotNumber);
        });

        if (typeof window.ethereum !== 'undefined') {
            window.ethereum.on('accountsChanged', () => location.reload());
            window.ethereum.on('chainChanged', () => location.reload());
        }
        
        // Notification Modal Logic
        const notificationModal = document.getElementById('notification-modal');
        const showNotification = (title, message, isPending = false) => {
            document.getElementById('notification-title').textContent = title;
            document.getElementById('notification-message').innerHTML = message;
            document.getElementById('notification-spinner').classList.toggle('hidden', !isPending);
            document.getElementById('notification-close-btn').classList.toggle('hidden', isPending);
            document.getElementById('notification-content').classList.toggle('tx-pending', isPending);
            notificationModal.classList.remove('hidden');
        };
        document.getElementById('notification-close-btn').addEventListener('click', () => notificationModal.classList.add('hidden'));

        // Initial setup
        addFrameRow();
    </script>
</body>
</html>
